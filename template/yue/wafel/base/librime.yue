---一些枚舉類型
export enum =
    ---配置節點類型枚舉
    ---@enum ConfigType
    config_types:
        null: "kNull" -- 空節點
        scalar: "kScalar" -- 純數據節點
        list: "kList" -- 列表節點
        map: "kMap" -- 字典節點
    ---分詞片段類型枚舉
    ---@enum SegmentType
    segment_types:
        void: "kVoid"
        guess: "kGuess"
        selected: "kSelected"
        confirmed: "kConfirmed"
    ---按鍵處理器返回結果枚舉
    ---@enum ProcessResult
    process_results:
        rejected: 0
        accepted: 1
        noop: 2
    ---修飾鍵掩碼枚舉
    ---@enum ModifierMask
    modifier_masks:
        shift: 0x1
        lock: 0x2
        ctrl: 0x4
        alt: 0x8
    ---操作系統類型枚舉
    ---@enum RimeOSType
    os_types:
        unknown: "unknown"
        android: "android"
        ios: "ios"
        linux: "linux"
        darwin: "darwin"
        windows: "windows"

export host =
    ---操作系統類型
    ---@type RimeOSType
    os: enum.os_types.unknown
    ---操作系統路徑分隔符
    path_sep: "/"

---通過 *rime_api* 查詢 *librime* 發行版本, 從而獲知系統版本
dist = rime_api.get_distribution_code_name()
if dist == "trime"
    host.os = enum.os_types.android
elseif dist == "Hamster"
    host.os = enum.os_types.ios
elseif dist == "fcitx-rime" or dist == "ibus-rime"
    host.os = enum.os_types.linux
elseif dist == "Squirrel"
    host.os = enum.os_types.darwin
elseif dist == "Weasel"
    host.os = enum.os_types.windows

host.path_sep = "\\" if host.os == enum.os_types.windows
---拼接用户數據目錄文件路徑
host.get_path = (filepath) ->
    rime_api.get_user_data_dir! .. host.path_sep .. filepath

---用於操作 Config 的方法
export config =
    ---遍歷一個 ConfigMap 的所有鍵值
    ---@param config_map ConfigMap|nil
    ---@param handler fun(key: string, item: ConfigItem)
    map_each: (config_map, handler) ->
        if config_map?.type == enum.config_types.kMap
            for key in *config_map::keys!
                handler key, item if item := config_map::get key
    ---遍歷一個ConfigList的所有項目
    ---@param config_list ConfigList|nil
    ---@param handler fun(i: integer, item: ConfigItem)
    list_each: (config_list, handler) ->
        if config_list?.type == enum.config_types.kList then
            for i = 0, config_list.size - 1
                handler i, item if item := config_list::get_at i

---記録日志
export logger =
    ---@type fun(string)
    info: log.info
    ---@type fun(string)
    warn: log.warning
    ---@type fun(string)
    error: log.error

---@param format string|number
logger.infof = (format, ...) ->
    logger.info string.format format, ...
---@param format string|number
logger.warnf = (format, ...) ->
    logger.warn string.format format, ...
---@param format string|number
logger.errorf = (format, ...) ->
    logger.error string.format format, ...
